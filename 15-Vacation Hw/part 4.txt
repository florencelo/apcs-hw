Set 7
1. What methods are implemented in Critter?
act, getActors, processActors, getMoveLocations, selectMoveLocation, makeMove
2. What are the five basic actions common to all critters when they act?
getActors, processActors, getMoveLocations, selectMoveLocation, makeMove
3. Should subclasses of Critter override the getActors method? Explain.
Yes—if the new critter subclass selects its actors from different locations than Critter class does, it will need to
override this method.
4. Describe three ways that a critter could process actors.
Answers may vary. It could eat all of the actors in its list, it could make them all change colors, or it could ask them
all to move.
5. What three methods must be invoked to make a critter move? Explain each of these methods.
getMoveLocations, selectMoveLocation, makeMove
Moving a critter is a three-step process. First, the act method calls the getMoveLocations method. For a
basic critter, this method returns a list of all the empty adjacent locations around the critter. After receiving the list of
possible empty locations, the selectMoveLocation randomly chooses one of the locations and returns that
location. If there are no empty locations to choose from, selectMoveLocation returns the current location of
the critter. The returned location is then passed to the makeMove method, and the critter is moved to the new
location.
6. Why is there no Critter constructor?
Critter extends Actor. The Actor class has a default constructor. If you do not create a constructor in a
class, Java will write a default constructor for you. The Critter default constructor that Java provides will call
super(), which calls the Actor default constructor. The Actor default constructor will make a blue critter
that faces north.


Set 8
1. Why does act cause a ChameleonCritter to act differently from a Critter even though
ChameleonCritter does not override act?
The act method calls getActors, processActors, getMoveLocations, selectMoveLocation,
and makeMove. The ChameleonCritter class overrides the processActors and makeMove
methods. Therefore, calling act for a ChameleonCritter will produce different behavior than calling act
for a Critter.
A critter processes its actors by removing any neighbor that is not a Rock or a Critter. A
ChameleonCritter processes its actors by randomly choosing one of its neighbors, getting the neighbor’s color,
and then changing its own color to that of its neighbor. When a ChameleonCritter calls makeMove, it first
faces the direction of its next location and then moves. A Critter does not change its direction when it moves.
2. Why does the makeMove method of ChameleonCritter call super.makeMove?
The makeMove method of the ChameleonCritter first changes the direction of the critter to face its new
location. Then it calls super.makeMove of the Critter class to actually move to the new location. After it
changes its direction, it behaves like (makeMove like) a Critter.
3. How would you make the ChameleonCritter drop flowers in its old location when it moves?
Modify the makeMove method to drop flowers in the old location. A variable is needed to keep track of the
ChameleonCritter’s current location. After the critter moves, put a flower in its old location only if the critter
actually moved to a new location. See the modified makeMove method below.
4. Why doesn’t ChameleonCritter override the getActors method?
Because it processes the same list of actors that its base class Critter does. Since ChameleonCritter does
not define a new behavior for getActors, it does not need to override this method.
5. Which class contains the getLocation method?
The Actor class contains the getLocation method. All Actor subclasses inherit this method.
6. How can a Critter access its own grid?
A critter can access its grid by calling the getGrid method that it inherits from the Actor class.


Set 9
1. Why doesn’t CrabCritter override the processActors method?
A CrabCritter processes its actors by eating all of the neighbors returned when getActors is called. This is
the same behavior that it inherits from its base class Critter. There is no need to override this method.
2. Describe the process a CrabCritter uses to find and eat other actors. Does it always eat all neighboring actors?
Explain.
The CrabCritter’s getActors method only looks for neighbors that are immediately in front of the crab
critter and to its right-front and left-front locations. Any neighbors found in these locations will be “eaten” when the
processActors method is called. Actors in the other neighboring locations will not be disturbed.
3. Why is the getLocationsInDirections method used in CrabCritter?
The parameter for this method brings in an array of directions. For the crab critter, this array contains the directions of
the possible neighbors that this crab can eat. The method getLocationsInDirections uses this array to
determine and return valid adjacent locations of this critter in the directions given by the array parameter.
4. If a CrabCritter has location (3,4) and faces south, what are the possible locations for actors that are returned by
a call to the getActors method?
(4,3), (4,4), and (4,5)
5. What are the similarities and differences between the movements of a CrabCritter and a Critter?
Similarities: When critters and crab critters move, they do not turn in the direction that they are moving. They both
randomly choose their next location from their list of possible move locations.
Differences: A crab critter will only move to its left or its right. A critter’s possible move locations are any of its eight
adjacent neighboring locations. When a crab critter cannot move, it will randomly turn right or left. When a critter
cannot move, it does not turn.
6. How does a CrabCritter determine when it turns instead of moving?
If the parameter loc in makeMove is equal to the crab critter’s current location, it turns instead of moving.
7. Why don’t the CrabCritter objects eat each other?
A crab critter inherits the processActors method from the Critter class. This method only removes actors
that are not rocks and not critters. Since a CrabCritter is a Critter, a crab critter will not eat any other
critter.

